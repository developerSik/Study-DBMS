/*외부 조인*/
/*JOIN할 때 선행 또는 후행 중 하나의 테이블 정보를 모두 확인하고 싶을 때 사용한다.*/

/*STADIUM 테이블에서 홈 팀인 팀 정보 조회, 홈 팀이 없어도 경기장은 모두 조회*/
SELECT * FROM STADIUM;
SELECT * FROM TEAM;

SELECT NVL(T.TEAM_ID, '공용') TEAM_ID, STADIUM_NAME FROM 
TEAM T RIGHT OUTER JOIN STADIUM S
ON T.STADIUM_ID = S.STADIUM_ID;

/*브론즈*/
/*EMPLOYEES 테이블에서 JOB_ID가 SA_REP인 사원 전체 조회*/
SELECT * FROM EMPLOYEES
WHERE JOB_ID = 'SA_REP';

/*실버*/
/*PLAYER 테이블에서 팀 별 최대 몸무게*/
SELECT TEAM_ID, MAX(WEIGHT) FROM PLAYER
GROUP BY TEAM_ID;

/*골드*/
/*AVG 함수를 쓰지 않고 PLAYER 테이블에서 선수들의 평균 키 구하기*/
SELECT SUM(HEIGHT) / COUNT(HEIGHT) FROM PLAYER;

/*플래티넘*/
/*DEPT 테이블의 LOC별 평균 급여를 반올림한 값과 각 LOC별 SAL 총 합을 조회, 반올림: ROUND()*/
SELECT LOC, NVL(ROUND(AVG(SAL), 2), 0) "AVG(SAL)",  NVL(SUM(SAL), 0) "SUM(SAL)"
FROM DEPT D LEFT OUTER JOIN EMP E
ON D.DEPTNO = E.DEPTNO
GROUP BY LOC;

/*다이아*/
/*PLAYER 테이블에서 팀 별 최대 몸무게인 선수의 전체 정보와 팀 명, 팀 전화번호 조회*/
SELECT P.*, T.TEAM_NAME, T.TEL
FROM TEAM T JOIN
(
   SELECT P2.* FROM
   (
      SELECT TEAM_ID, MAX(WEIGHT) W FROM PLAYER
      GROUP BY TEAM_ID
   ) P1 
   JOIN PLAYER P2
   ON P1.TEAM_ID = P2.TEAM_ID AND P1.W = P2.WEIGHT
) P
ON T.TEAM_ID = P.TEAM_ID;


/*마스터*/
/*EMP 테이블에서 HIREDATE가 FORD의 입사년도와 같은 사원 전체 정보 조회*/
SELECT * FROM EMP
WHERE TO_CHAR(HIREDATE, 'YYYY') = (SELECT TO_CHAR(HIREDATE, 'YYYY') FROM EMP WHERE ENAME = 'FORD');

/*EMPLOYEES 테이블에서 사원의 매니저 이름, 사원의 이름 조회, 매니저가 없는 사원은 본인이 매니저임을 표시*/
SELECT E2.LAST_NAME || E2.FIRST_NAME "매니저 이름", E1.LAST_NAME || E1.FIRST_NAME "사원 이름" 
FROM EMPLOYEES E1 JOIN EMPLOYEES E2
ON NVL(E1.MANAGER_ID, E1.EMPLOYEE_ID) = E2.EMPLOYEE_ID;

SELECT 
NVL(E2.LAST_NAME, E1.LAST_NAME) || NVL(E2.FIRST_NAME, E1.FIRST_NAME) "매니저 이름", 
E1.LAST_NAME || E1.FIRST_NAME "사원 이름" 
FROM EMPLOYEES E1 LEFT OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

/*EMPLOYEES에서 부서별 매니저와 부서별 사원 조회*/
SELECT * FROM EMPLOYEES;

SELECT D.DEPARTMENT_NAME, D.MANAGER_NAME, E.LAST_NAME || E.FIRST_NAME "EMPLOYEE_NAME" FROM
(
   SELECT E.DEPARTMENT_ID, DEPARTMENT_NAME, E.LAST_NAME || E.FIRST_NAME "MANAGER_NAME"
   FROM DEPARTMENTS D JOIN EMPLOYEES E
   ON D.MANAGER_ID = E.EMPLOYEE_ID
)D
RIGHT OUTER JOIN EMPLOYEES E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
ORDER BY DEPARTMENT_NAME;

/*EMPLOYEES에서 각 사원별로 JOB_ID(매니저)와 JOB_ID(사원) 조회*/
SELECT E2.LAST_NAME, E1.JOB_ID, E2.JOB_ID FROM
(
   SELECT JOB_ID, MANAGER_ID 
   FROM EMPLOYEES
   GROUP BY JOB_ID, MANAGER_ID
) E1 
FULL OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID
ORDER BY E2.LAST_NAME;

/*VIEW*/
/*CREATE VIEW [이름] AS [쿼리문]*/

/*
 * 기존의 테이블을 그대로 놔둔 채 필요한 컬럼들 및 새로운 컬럼을 만든 가상 테이블.
 * 실제 데이터가 저장되는 것은 아니지만, VIEW를 통해서 데이터를 관리할 수 있다.
 * 
 * - 독립성: 다른 곳에서 접근하지 못하도록 하는 성질
 * - 편리성: 길고 복잡한 쿼리문을 매번 작성할 필요가 없다
 * - 보안성: 기존의 쿼리문이 보이지 않는다
 * 
 * */

/*PLAYER 테이블에 나이 컬럼 추가한 뷰 만들기*/
CREATE VIEW VIEW_PLAYER AS
SELECT FLOOR((SYSDATE - BIRTH_DATE) / 365) AGE, P.* FROM PLAYER P;

SELECT * FROM VIEW_PLAYER
WHERE AGE > 20;

/*EMPLOYEES 테이블에서 사원 이름과 그 사원의 매니저 이름이 있는 VIEW 만들기, VIEW_EMPLOYEES*/
CREATE VIEW VIEW_EMPLOYEES
AS
SELECT 
E1.LAST_NAME || ' ' || E1.FIRST_NAME "EMPLOYEE_NAME", 
E2.LAST_NAME || ' ' || E2.FIRST_NAME "MANAGER_NAME" 
FROM EMPLOYEES E1 JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

SELECT * FROM VIEW_EMPLOYEES;

